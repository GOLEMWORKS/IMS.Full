@using IMS.CoreBusiness
@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject NavigationManager NavigationManager

<div class="input-group">
    <input type="text" 
        class="form-control"
        placeholder="Введите наименование"
        @bind-value="inventoryNameToSearch"
        @onkeyup="Enter"/>

    <div class="btn-group">
        <button type="button"
                class="btn btn-success"
                @onclick="@(async() => {await ViewInventories();})">
            Найти &#8203;
            <i class="fa fa-search"></i>
        </button>

        <button type="button"
                class="btn btn-primary"
                @onclick="RedirectToAddPage">
            Добавить &#8203;
            <i class="fa fa-plus"></i>
        </button>
    </div>
</div>
    
@if (this.DisplaySearchResult 
        && _inventories != null
        && selectedInventory == null)
{
    <div style="overflow-y: auto; max-height: 300px;">
        <ul style="list-style-type:none">
            @foreach (var inv in _inventories)
            {
                <li style="cursor:pointer"
                    @onclick="@(async() => {await SelectInventory(inv); })"
                    @key="inv.InventoryId">
                    @inv.InventoryName
                </li>
            }
        </ul>
    </div>
}

@code {
    private string? inventoryNameToSearch;
    private List<Inventory>? _inventories;
    private Inventory? selectedInventory;

    [Parameter]
    public EventCallback<List<Inventory>> OnSearchInventories { get; set; }

    [Parameter]
    public EventCallback<Inventory> OnSelectInventory { get; set; }

    [Parameter]
    public bool DisplaySearchResult { get; set; } = false;

    private async Task ViewInventories()
    {
        var inventories = (await ViewInventoriesByNameUseCase
                .ExecuteAsync(inventoryNameToSearch??string.Empty)).ToList();

        await OnSearchInventories.InvokeAsync(inventories);
        _inventories = inventories;
        this.selectedInventory = null;
    }

    public async void SearchButton()
    {
        await ViewInventories();
    }

    public async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await ViewInventories();
        }
    }

    public void RedirectToAddPage()
    {
        NavigationManager.NavigateTo("/addnewinventory");
    }

    private async Task SelectInventory(Inventory inv)
    {
        await OnSelectInventory.InvokeAsync(inv);
        selectedInventory = inv;
    }
}
