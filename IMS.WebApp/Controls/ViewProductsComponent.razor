@using IMS.CoreBusiness

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject NavigationManager NavigationManager

<div class="input-group">
    <input type="text" 
        class="form-control"
        placeholder="Введите наименование"
        @bind-value="productNameToSearch"
        @bind-value:event="oninput"
        @onkeyup="Enter"/>

    <div class="btn-group">
        <button type="button"
                class="btn btn-success"
                @onclick="@(async()=> {await ViewProducts();})">
            Найти &#8203;
            <i class="fa fa-search"></i>
        </button>
        <button type="button"
                class="btn btn-primary"
                @onclick="RedirectToAddPage">
            Добавить &#8203;
            <i class="fa fa-plus"></i>
        </button>
    </div>
</div>


@if (this.DisplaySearchResult
        && _products != null
        && selectedProduct == null)
{
    <div style="overflow-y: auto; max-height: 300px; border: 1px solid silver; padding-top: 3px;">
        <ul style="list-style-type:none">
            @foreach (var product in _products)
            {
                <li style="cursor:pointer;"
                @onclick="@(async() => {await SelectProduct(product); })"
                @key="product.ProductId">
                    @product.ProductName
                </li>
            }
        </ul>
    </div>
}
    
@code {
    private string? _productNameToSearch;
    public string? productNameToSearch
    {
        get => _productNameToSearch;
        set
        {
            _productNameToSearch = value;
            if (!string.IsNullOrWhiteSpace(_productNameToSearch) &&
                    _productNameToSearch.Length > 2)
            {
                ViewProducts();
            }
        }
    }

    private List<Product>? _products;
    private Product? selectedProduct;

    [Parameter]
    public EventCallback<List<Product>> OnSearchProducts { get; set; }

    [Parameter]
    public bool DisplaySearchResult { get; set; } = false;

    [Parameter]
    public EventCallback<Product> OnSelectProduct { get; set; }

    private async Task ViewProducts()
    {
        var products = (await ViewProductsByNameUseCase
                .ExecuteAsync(productNameToSearch??string.Empty)).ToList();

        await OnSearchProducts.InvokeAsync(products);
        _products = products;
        this.selectedProduct = null;

        StateHasChanged();
    }

    private async Task SelectProduct(Product prod)
    {
        await OnSelectProduct.InvokeAsync(prod);
        selectedProduct = prod;
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            ViewProducts();
        }
    }

    public void RedirectToAddPage()
    {
        NavigationManager.NavigateTo("/addproduct");
    }
}
