@page  "/purchase"

@using Microsoft.AspNetCore.Identity

@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase
@inject NavigationManager NavigationManager

<PageTitle> Заказ комплектующих </PageTitle>
<h3>Покупка комплектующих</h3>
<br />

@if(purchaseViewModel != null)
{
    <EditForm Model="purchaseViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="po">Номер заказа</label>
            <InputText id="po" @bind-Value="purchaseViewModel.PurchaseOrder" class="form-control">Заказ</InputText>
        </div>

        <div class="form-group">
            <label for="inv">Товар</label>
            <ViewInventoriesComponent 
                OnSelectInventory="OnSelectInventory"
                DisplaySearchResult="true">
            </ViewInventoriesComponent>
            <InputText id="inv" class="form-control" @bind-Value="purchaseViewModel.InventoryName" disabled></InputText>
            <input type="hidden" value="@purchaseViewModel.InventoryId" />
            @if (selectedInventory != null)
            {
                <text>Стоимость: </text>
                @selectedInventory?.Price.ToString("c", new System.Globalization.CultureInfo("ru-RU"));
            }
        </div>

        <div class="form-group">
            <label for="qty">Количество</label>
            <InputNumber id="qty" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control">Заказ</InputNumber>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">
            <i class="fa fa-dollar"></i>
            Приобрести
        </button>
        
    </EditForm>
}

@if(validPurchase){
    <RadzenAlert AllowClose="true" AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter">
        Покупка произведена успешно!
    </RadzenAlert>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }

    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();

    private Inventory selectedInventory;

    private bool validPurchase = false;

    private string email;

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            var currentUser = await userManager.GetUserAsync(user);
            email = currentUser.Email;
        }
    }

    private void OnSelectInventory(Inventory inventory)
    {
        this.selectedInventory = inventory;
        purchaseViewModel.InventoryId = inventory.InventoryId;
        purchaseViewModel.InventoryName = inventory.InventoryName;
    }

    private async Task OnValidSubmit()
    {
        await PurchaseInventoryUseCase.ExecuteAsync( 
                this.purchaseViewModel.PurchaseOrder,
                this.selectedInventory,
                this.purchaseViewModel.QuantityToPurchase,
                this.email);
        validPurchase = true;
        this.purchaseViewModel = new PurchaseViewModel();
        this.selectedInventory = null;
    }
}
