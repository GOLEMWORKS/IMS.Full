@page "/addnewinventory"

@inject IAddInventoryUseCase AddInventoryUseCase
@inject NavigationManager NavigationManager

<h3>Добавить комплектующее</h3>
<br />

@if(inventory != null)
{
    <EditForm Model="inventory" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>

            <div class="form-group">
                <label for="name">Наименование</label>
                <InputText id="name" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
            </div>

            <div class="form-group">
                <label for="quantity">Количество</label>
                <InputNumber id="quantity" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
            </div>

            <div class="form-group">
                <label for="price">Цена ₽ (за штуку)</label>
                <InputNumber id="price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
            </div>
            <br />
            <button 
                type="submit" 
                class="btn btn-primary">
                    <i class="fa fa-save"></i>
                &#8203; Сохранить
            </button>
            <button 
                type="button" 
                class="btn btn-danger" 
                @onclick="Back">
                    <i class="fa fa-close"></i>
                Отмена
            </button>
    </EditForm>
}
@code {
    private Inventory? inventory;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        inventory = new Inventory();
    }

    private async Task OnValidSubmit()
    {
        if(this.inventory != null)
        {
            await AddInventoryUseCase.ExecuteAsync(this.inventory);
            NavigationManager.NavigateTo("/inventories");
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/inventories");
    }
}
