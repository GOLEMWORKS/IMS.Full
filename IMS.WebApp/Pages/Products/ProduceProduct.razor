@page "/produce"

@attribute [Authorize]

@inject IProduceProductUseCase ProduceProductUseCase
@inject IValidateEnoughInventoriesForProducingUseCase ValidateEnoughInventoriesForProducingUseCase
@inject NavigationManager navMan

<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>
<PageTitle>Сборка</PageTitle>
<h3>Производство продукта</h3>

@if (produceViewModel != null)
{
    <EditForm Model="produceViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="po">Номер заказа</label>
            <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control">Заказ</InputText>
        </div>

        <div class="form-group">
            <label for="inv">Продукт</label>
            <ViewProductsComponent OnSelectProduct="OnSelectProduct"
                                      DisplaySearchResult="true">
            </ViewProductsComponent>
            <InputText id="inv" class="form-control" @bind-Value="produceViewModel.ProductName" disabled></InputText>
            <input type="hidden" value="@produceViewModel.ProductId" />
            @if (selectedProduct != null)
            {
                <text>Стоимость: </text>
                @selectedProduct?.ProductPrice.ToString("c", new System.Globalization.CultureInfo("ru-RU"));
            }
        </div>

        <div class="form-group">
            <label for="qty">Количество</label>
            <InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control">Заказ</InputNumber>
        </div>
        <br />

        <button type="submit" class="btn btn-primary">
            <i class="fa fa-cog"></i>
            Собрать
        </button>

        
    </EditForm>
}

@if (validPurchase)
{
    <RadzenAlert AllowClose="true" AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter">
        Сборка продукта произведена успешно!
    </RadzenAlert>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }

    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product selectedProduct;
    private string errorMessage;
    private string CurrentUserName;

    private bool validPurchase = false;

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationState).User;

        if (user.Identity.IsAuthenticated) 
        {
            var currentUser = await userManager.GetUserAsync(user);
            var userName = currentUser.UserName;
            CurrentUserName = userName;
        }
        else
        {
            navMan.NavigateTo("/products");
        }
    }

    private async Task OnValidSubmit()
    {
        if (!await ValidateEnoughInventoriesForProducingUseCase.ExecuteAsync(
                this.selectedProduct,
                this.produceViewModel.QuantityToProduce
        ))
        {
            errorMessage = $"Недостаточно комплектующих для сборки продукта {this.selectedProduct.ProductName} {this.produceViewModel.QuantityToProduce} раз(а).";
            return;
        } 
        else
        {
            errorMessage = string.Empty;
        }

        await ProduceProductUseCase.ExecuteAsync(
                this.produceViewModel.ProductionNumber,
                this.selectedProduct,
                this.produceViewModel.QuantityToProduce,
                CurrentUserName
    );

        validPurchase = true;
        this.produceViewModel = new ProduceViewModel();
        this.selectedProduct = null;
    }

    public void OnSelectProduct(Product product)
    {
        this.selectedProduct = product;
        produceViewModel.ProductId = product.ProductId;
        produceViewModel.ProductName = product.ProductName;
    }
}
