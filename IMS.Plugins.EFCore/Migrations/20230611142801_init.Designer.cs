// <auto-generated />
using System;
using IMS.Plugins.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMS.Plugins.EFCore.Migrations
{
    [DbContext(typeof(IMSContext))]
    [Migration("20230611142801_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IMS.CoreBusiness.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"), 1L, 1);

                    b.Property<string>("InventoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            InventoryId = 1,
                            InventoryName = "Двигатель (Бензиновый)",
                            Price = 26000.0,
                            Quantity = 1
                        },
                        new
                        {
                            InventoryId = 2,
                            InventoryName = "Двигатель (Дизельный)",
                            Price = 20000.0,
                            Quantity = 1
                        },
                        new
                        {
                            InventoryId = 3,
                            InventoryName = "Электродвигатель",
                            Price = 40000.0,
                            Quantity = 1
                        },
                        new
                        {
                            InventoryId = 4,
                            InventoryName = "Трансмиссия",
                            Price = 28700.0,
                            Quantity = 1
                        },
                        new
                        {
                            InventoryId = 5,
                            InventoryName = "Колёса",
                            Price = 4000.0,
                            Quantity = 4
                        },
                        new
                        {
                            InventoryId = 6,
                            InventoryName = "Шины",
                            Price = 4000.0,
                            Quantity = 5
                        },
                        new
                        {
                            InventoryId = 7,
                            InventoryName = "Кузов",
                            Price = 74000.0,
                            Quantity = 1
                        },
                        new
                        {
                            InventoryId = 8,
                            InventoryName = "Блок батареи",
                            Price = 70000.0,
                            Quantity = 1
                        },
                        new
                        {
                            InventoryId = 9,
                            InventoryName = "Одиночное кресло",
                            Price = 9000.0,
                            Quantity = 1
                        },
                        new
                        {
                            InventoryId = 10,
                            InventoryName = "Кресло 2 + 1",
                            Price = 18500.0,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("IMS.CoreBusiness.InventoryTransaction", b =>
                {
                    b.Property<int>("InventoryTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryTransactionId"), 1L, 1);

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("DoneBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryType")
                        .HasColumnType("int");

                    b.Property<string>("POnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityAfter")
                        .HasColumnType("int");

                    b.Property<int>("QuantityBefore")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InventoryTransactionId");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryTransactions");
                });

            modelBuilder.Entity("IMS.CoreBusiness.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductName = "Автомобиль (Дизельное топливо)",
                            ProductPrice = 2000000.0,
                            ProductQuantity = 1
                        },
                        new
                        {
                            ProductId = 2,
                            ProductName = "Автомобиль (Бензин)",
                            ProductPrice = 2020000.0,
                            ProductQuantity = 1
                        },
                        new
                        {
                            ProductId = 3,
                            ProductName = "Электромобиль",
                            ProductPrice = 4120000.0,
                            ProductQuantity = 1
                        });
                });

            modelBuilder.Entity("IMS.CoreBusiness.ProductInventory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("ProductInventory");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            InventoryId = 2,
                            InventoryQuantity = 1
                        },
                        new
                        {
                            ProductId = 1,
                            InventoryId = 7,
                            InventoryQuantity = 1
                        },
                        new
                        {
                            ProductId = 1,
                            InventoryId = 5,
                            InventoryQuantity = 4
                        },
                        new
                        {
                            ProductId = 1,
                            InventoryId = 6,
                            InventoryQuantity = 4
                        },
                        new
                        {
                            ProductId = 1,
                            InventoryId = 9,
                            InventoryQuantity = 2
                        },
                        new
                        {
                            ProductId = 1,
                            InventoryId = 10,
                            InventoryQuantity = 1
                        },
                        new
                        {
                            ProductId = 2,
                            InventoryId = 1,
                            InventoryQuantity = 1
                        },
                        new
                        {
                            ProductId = 2,
                            InventoryId = 7,
                            InventoryQuantity = 1
                        },
                        new
                        {
                            ProductId = 2,
                            InventoryId = 5,
                            InventoryQuantity = 4
                        },
                        new
                        {
                            ProductId = 2,
                            InventoryId = 6,
                            InventoryQuantity = 4
                        },
                        new
                        {
                            ProductId = 2,
                            InventoryId = 9,
                            InventoryQuantity = 2
                        },
                        new
                        {
                            ProductId = 2,
                            InventoryId = 10,
                            InventoryQuantity = 1
                        },
                        new
                        {
                            ProductId = 3,
                            InventoryId = 3,
                            InventoryQuantity = 4
                        },
                        new
                        {
                            ProductId = 3,
                            InventoryId = 7,
                            InventoryQuantity = 1
                        },
                        new
                        {
                            ProductId = 3,
                            InventoryId = 8,
                            InventoryQuantity = 2
                        },
                        new
                        {
                            ProductId = 3,
                            InventoryId = 5,
                            InventoryQuantity = 4
                        },
                        new
                        {
                            ProductId = 3,
                            InventoryId = 6,
                            InventoryQuantity = 4
                        },
                        new
                        {
                            ProductId = 3,
                            InventoryId = 9,
                            InventoryQuantity = 2
                        },
                        new
                        {
                            ProductId = 3,
                            InventoryId = 10,
                            InventoryQuantity = 1
                        });
                });

            modelBuilder.Entity("IMS.CoreBusiness.ProductTransaction", b =>
                {
                    b.Property<int>("ProductTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTransactionId"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<string>("DoneBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityAfter")
                        .HasColumnType("int");

                    b.Property<int>("QuantityBefore")
                        .HasColumnType("int");

                    b.Property<string>("SalesOrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("ProductTransactionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTransactions");
                });

            modelBuilder.Entity("IMS.CoreBusiness.InventoryTransaction", b =>
                {
                    b.HasOne("IMS.CoreBusiness.Inventory", "inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("inventory");
                });

            modelBuilder.Entity("IMS.CoreBusiness.ProductInventory", b =>
                {
                    b.HasOne("IMS.CoreBusiness.Inventory", "Inventory")
                        .WithMany("ProductInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.CoreBusiness.Product", "Product")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IMS.CoreBusiness.ProductTransaction", b =>
                {
                    b.HasOne("IMS.CoreBusiness.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IMS.CoreBusiness.Inventory", b =>
                {
                    b.Navigation("ProductInventories");
                });

            modelBuilder.Entity("IMS.CoreBusiness.Product", b =>
                {
                    b.Navigation("ProductInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
